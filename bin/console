#!/usr/bin/env php
<?php
require __DIR__ . '/../vendor/autoload.php';

use Laminas\Code\DeclareStatement;
use Laminas\Code\Generator\ClassGenerator;
use Laminas\Code\Generator\DocBlockGenerator;
use Laminas\Code\Generator\FileGenerator;
use Laminas\Code\Generator\MethodGenerator;
use Laminas\Code\Generator\ParameterGenerator;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Path;
use Symfony\Component\String\UnicodeString;

#[AsCommand(name: 'bootstrap', hidden: false)]
final class BootstrapCommand extends Command
{
    public function configure(): void
    {
        $this
            ->setAliases(['b'])
            ->addOption('id', 'i', InputOption::VALUE_REQUIRED)
            ->addArgument('name', mode: InputArgument::REQUIRED);
    }

    protected function interact(InputInterface $input, OutputInterface $output): void
    {
        $isInputValid = $input->getOption('id') && $input->getArgument('name');

        if (!$isInputValid)
        {
            throw new RuntimeException('You need to specify options id and name');
        }
    }

    /**
     * @param InputInterface         $input
     * @param ConsoleOutputInterface $output
     *
     * @return int
     */
    public function execute(InputInterface $input, OutputInterface $output): int
    {
        $generator = new SuiteGenerator(
            (int)$input->getOption('id'),
            (string)$input->getArgument('name')
        );

        $types = [
            SuiteGenerator::TYPE_SOLUTION => [
                __DIR__ . '/../src',
                'serhioli\\leetcode',
                'Solution',
            ],
            SuiteGenerator::TYPE_TESTCASE => [
                __DIR__ . '/../tests/unit',
                'serhioli\\leetcode\\tests\\unit',
                'SolutionTest',
            ],
        ];

        $filesystem = new Filesystem();
        foreach ($types as $type => $config)
        {
            [$pathPrefix, $classPrefix, $fileName] = $config;

            $file = $generator->prepare(
                $type,
                $classPrefix,
                $fileName
            );

            $filesystem->dumpFile(
                Path::canonicalize("{$pathPrefix}/{$generator->getNSAlias()}/{$fileName}.php"),
                $file->generate()
            );
        }

        return Command::SUCCESS;
    }
}

final class SuiteGenerator
{
    public const TYPE_SOLUTION = 0;
    public const TYPE_TESTCASE = 1;

    private int $type = -1;
    private string $namespacePrefix = '\\';
    private string $className = 'SomeClass';

    public function __construct(
        private int    $suiteId,
        private string $suiteName,
    ) {
    }

    private function setType(int $type): void
    {
        if (!in_array($type, [self::TYPE_SOLUTION, self::TYPE_TESTCASE]))
        {
            throw new RuntimeException('Wrong type');
        }

        $this->type = $type;
    }

    public function prepare(int $type, string $namespacePrefix, string $className): FileGenerator
    {
        $this->setType($type);
        $this->namespacePrefix = $namespacePrefix;
        $this->className       = $className;

        $file = new FileGenerator();
        $file->setDeclares([DeclareStatement::strictTypes(1)]);
        $file->setNamespace($this->getFileNamespace());
        $file->setClass($this->getClass());

        return $file;
    }

    private function getClass(): ClassGenerator
    {
        $class = new ClassGenerator();
        $class->setName($this->className);
        if ($this->type === self::TYPE_TESTCASE)
        {
            $class->addUse(TestCase::class);
            $class->setExtendedClass(TestCase::class);
        }

        $this->fillMethods($class);

        return $class;
    }

    private function fillMethods(ClassGenerator $class): void
    {
        if ($this->type === self::TYPE_SOLUTION)
        {
            $class->addMethodFromGenerator(
                new MethodGenerator('changeName')
            );
        }
        if ($this->type === self::TYPE_TESTCASE)
        {
            $class->addMethodFromGenerator(
                new MethodGenerator(
                    'testIsSolved',
                    [
                        new ParameterGenerator('value'),
                    ],
                    docBlock: DocBlockGenerator::fromArray([
                        'tags' => [
                            [
                                'name'        => 'dataProvider',
                                'description' => 'dataProvider',
                            ],
                        ],
                    ])
                )
            );

            $class->addMethodFromGenerator(
                new MethodGenerator(
                    'dataProvider',
                    body: 'return [];'
                )
            );
        }
    }

    private function getFileNamespace(): string
    {
        return "{$this->namespacePrefix}\\{$this->getNSAlias()}";
    }

    public function getNSAlias(): string
    {
        $normalizedPathname = (new UnicodeString($this->suiteName))->camel()->toString();

        return "p{$this->suiteId}_{$normalizedPathname}";
    }
}

//region Launch Application
$application = new Application();
$application->add(new BootstrapCommand());
$application->run();
//endregion
